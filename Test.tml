
(* comment 
   in many 
   lines *)

// line comment

//EXAMPLES TO SHOW
let f = fun x -> fun y -> fun z -> (x, y - 1, z) in (f 11 22 33, f "Hello" 23 4.5, f false 18 'c') //(int,int,int) (string,int,float) (bool,int,char)
let rec sum = fun x -> if x > 0 then x + ((sum) (x - 1)) else 0 in (sum 10) //(int)


//LAMBDA (UNLABELED)
fun x -> x //('a -> 'a)  
fun x -> fun y -> x //('a -> 'b -> 'a) 
fun x -> fun y -> y //('a -> 'b -> 'b) 
fun x -> fun y -> 4 //('a -> 'b -> int) 
fun x -> fun y -> fun z -> x //('a -> 'b -> 'c -> 'a) 
fun x -> fun y -> fun z -> y //('a -> 'b -> 'c -> 'b) 
fun x -> fun y -> fun z -> z //('a -> 'b -> 'c -> 'c) 

//LAMBDA (UNLABELED) + BINOP / UNOP
fun x -> x+1 //(int -> int) 
fun x -> 1+x //(int -> int) 
fun x -> fun y -> x+y //(int -> int -> int) 
fun x -> fun y -> x+1 //(int -> 'a -> int) 
fun x -> fun y -> fun z -> x+1 //(int -> 'a -> 'b -> int) 
fun x -> fun y -> fun z -> x+y+3 //(int -> int -> 'a -> int) 
fun x -> fun y -> fun z -> x+3+y //(int -> int -> 'a -> int) 
fun x -> fun y -> fun z -> 3+x+y //(int -> int -> 'a -> int) 
fun x -> x>10 // (int -> bool) 
fun x -> not x //(bool -> bool) 


//LAMBDA (LABELED)
fun (x : int) -> x //(int -> int) 
fun (x : string) -> fun y -> x //(string -> 'a -> string) 
fun (x : float) -> fun y -> y // (float -> 'a -> 'a) 

//LAMBDA (LABELED) + BINOP
fun (x : int) -> x+1 //(int -> int) 
fun (x : int) -> 1+x //(int -> int) 
fun x -> fun (y : int) -> x+y //(int -> int -> int) 
fun (x : int) -> fun (y : int) -> x+1 //(int -> int -> int)
fun (x : int) -> fun (y : int) -> fun z -> x+1 //(int -> int -> 'a -> int) 
fun x -> fun y -> fun (z : string) -> x+y+3 //(int -> int -> string -> int) 
fun x -> fun y -> fun (z : int) -> x+3+y //(int -> int -> int -> int) 
fun x -> fun y -> fun (z : float) -> 3+x+y //(int -> int -> float -> int) 


//LAMBDA + IF
fun x -> if x then "True" else "False" //(bool -> string) 
fun x -> if x > 0 then 4 else 6 //(int -> int) 
fun x -> if true then x else 7 //(int -> int) 
fun x -> if true then 7 else x //(int -> int) 
fun x -> fun y -> if y then 7 else x //(int -> bool -> int) 
fun x -> fun y -> fun z -> if y then x else z // ('a -> bool -> 'a -> 'a) 

//UNOP
not true // (bool) 
not false //(bool)  

//LIT 
8 //(int) 
"Hello World" //(string)
7.3 //(float) 
true //(bool) 
'a' //(char) 

//APP
(fun x -> x) (9) //(int) 
(fun x -> fun y -> fun z -> x+3+y) (9) //(int -> 'a -> int) 
(fun x -> x) ("Hello Nicola") //(string) 
(fun x -> if x > 0 then 7 else 8) (10)  //(int) 
(fun x -> fun y -> fun z -> x+1) (9) // ('a -> 'b -> int)
(fun x -> fun y -> fun z -> "Hello") (9) //('a -> 'b -> string) 

//LET
let a = 0 //(int) 
let b = "Hello" //(string) 
let c = fun x -> x+1 //(int -> int) 
let d = 3+4 //(int) 
let e = fun a -> fun d -> a + d //(int -> int -> int) 
let f = if true then "True" else "False" //(string) 
let g = fun f -> f (f 3) //(int -> int -> int)
let h = fun f -> f 3 //(int -> 'a -> 'a)

let f = fun x -> fun y -> fun z -> (x, y - 1, z) in (f 11 22 33, f "Hello" 23 4.5, f false 18 'c') //(int,int,int) (string,int,float) (bool,int,char)
let f = fun x -> x in (f 10, f "Hello") //(int,string) 
let f = (fun x -> fun y -> fun z -> x) (fun w -> 8) //('a -> 'b -> 'c -> int)
let f x = x*x + 3 //(int -> int)
let f = fun x -> fun y -> fun z -> (x+y,z) //(int -> int -> 'a -> (int,'a))
let f = fun x -> fun y -> fun z -> (x+y,z) in f 11 12 "Students" //(int,string)
let v1 = (let f = fun x -> x + 8 in f) 3 //(int) 
let v2 = (let n = fun x -> x in n) (let n = 7 in n - 1) //(int) 
let v3 = (let n = 8 in n) + 1 //(int)
let map_pair_currify f x y = (f x, f y) //('a -> 'b -> 'a -> 'a -> ('b,'b))
let complex f x y = (f (x), f (y - 1)) //(int -> 'a -> int -> int -> ('a, 'a))
let f1 x = x+1 in let f2 y = y - 1 in f1 (f2 3) //(int)
let f = fun x -> fun y -> let g = fun z -> (x, z + 1) in let h = fun t -> if x < 2 then t else y in g //(int -> 'a -> int -> (int,int))
let f = fun x -> fun y -> let g = fun z -> (x, z + 1) in let h = fun t -> if x < 2 then t else y in h //(int -> 'a -> 'a -> 'a)

//LET REC

let rec count x = if x > 0 then (count) (x - 1) else 0 //(int -> int)
let rec count (x: int) = if x > 0 then (count) (x - 1) else 0 //(int -> int)
let rec count x = if x > 0 then (count) (x - 1) else 0 in (count 10) //(int)
let rec sum = fun x -> if x > 0 then x + ((sum) (x - 1)) else 0 in (sum 10) //(int)
let rec fib n = if n > 1 then (((fib) (n - 1)) + ((fib) (n - 2))) else n //(int -> int)
let rec fib n = if n > 1 then (((fib) (n - 1)) + ((fib) (n - 2))) else n in (fib 10) //(int)
let rec gcd x y = if y = 0 then x else gcd y (x % y) //(int -> int -> int)
let rec f = fun x -> if x < 0 then 0 else f (x - 1) //(int -> int)
let rec count : int -> int = fun x -> count (x+1) //(int -> int)
let rec polymorphism x = polymorphism x //('a -> 'a)
let rec polymorphism x = polymorphism x in (polymorphism 10, polymorphism "Hello") //(int,string)

//TUPLE
(8,7.4,'c',"Hello",true,4+3,not false,fun x -> x+1) //(int,float,char,string,bool,int,true,int->int)
(8,7.4,'c',"Hello",true,4+3,not false,fun x -> x) //(int,float,char,string,bool,int,true,'a->'a)


//ERROR 
let f = fun x -> (x + 1, if x then 1 else 2) //UNIFY ERROR: because x must be unified with bool and int
let f = fun x -> (x + 1, if true then 3 else "Hello") //UNIFY ERROR: because 3 is int and "Hello" is a string
let f = fun x -> (x+3,x (true)) //UNIFY ERROR: In the first element infer the x as an int, but in the second element is expected an Arrow Type
let rec f x = (f 11, f true) //UNIFY ERROR: can't unify a Bool with an Int
let f = fun x -> fun y -> (x ("Hello"),x+y) //UNIFY ERROR can't unify string -> 'e with int

